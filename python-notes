dictionary:
setdefault will set a key value to a given value as defualt if key is not found, else that value is returned
get will return the value of the key else a default value is returned - but the value is not set
defaultdict - sets up a dictionary with default value kind of initializer while setdefault sets up the value of key, while accessing the key or after it.

__name__ is to find the local scope of the main function and executes as stand alone but importing that does not run that codebase outside of the module - script based at command line.

__init__.py is an empty py file in a each of directories under dir1/dir2/mod so that
mod could be imported in a file as import dir1.dir2.mod

generators are of two types - function type gens using yeild & expression type gen - list comprehension

any collection having _next_ is iterator and having _next_ is iterable


remove(el) - removes the first matching element - el and used when element to be removed's index is not known

del / pop - used when index is know and both work on indexes

*** key string functions ***

s.find('substring') - returns lowest index where the substring is found
s.count('letter')
''.join(seq)
s.replace('source-string','dest-string')
s.index('string')
s.strip('allmatchingchars else space')
splitlines
split([sep]) - return list of words using sep as delimiter
isalnum()isalpha()isdigit()

List comprehension applies an expression onto a sequence unlike map / filter over a sequence or with a far loop & function
[x*3 for x in range(5)] - list(map(lambda x:x*3),range(5))

List comprehension eg-2 for traversing multiple lists

result = [ x ** y for x in [10, 20, 30] for y in [2, 3, 4]]

ord('A') -> ascii value of A

speed of operation : list comprehension > map > for loop as LC and Map are implemented in C at Python VM level

hastables are implemented through dictionaries


# dictionary comprehension example
keys=['a','b','c'] values = [1,2,3]
d4 = {k:v for k,v in zip(keys,values)} or easier as dict(zip(keys,values))
print(d4)

closures are function objects which retains the values even past execution of function calls or outside of memory.
It is used for data hiding when there are few methods and widely in decorators to create wrapper functions.

All of python's mutable objects - list,dictionaries are not hashables.
Hashable objects in python are indexable and does not change their value in thier lifetime like
immutable ones - frozen set, tuples, primitive data types,instances of user defined classes.
they need to be comparble
